# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
context:
  oot_name: hermeslite2
  name: gnuradio-${{ oot_name }}
  # update script relies on `git_url` and `git_branch` and can replace:
  #   `git_rev`, `base_version`, `date_str`, `build`
  git_url: https://github.com/radioconda/gr-hermeslite2.git
  git_branch: updates
  git_rev: 8f61e5396a73b5cecf696b01ee4a4681f4b56bc5
  base_version: "1.0.0.0"
  date_str: "20250304"
  version: ${{ base_version }}.post${{ date_str }}+g${{ git_rev[:7] }}
  build: "0"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  git: ${{ git_url }}
  rev: ${{ git_rev }}

build:
  number: ${{ build }}
  files:
    exclude:
      - "**/gdk-pixbuf*"
      - "**/*.pyc"

requirements:
  build:
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - numpy
        - pybind11
    - ${{ compiler("c") }}
    - ${{ stdlib("c") }}
    - ${{ compiler("cxx") }}
    - cmake
    - git
    - ninja
    - pkg-config
  host:
    - gnuradio-core
    - libboost-devel
    - numpy
    - if: win
      then: pip
    - pybind11
    - python
  run:
    - numpy
    - python
  ignore_run_exports:
    from_package:
      # this only builds against the headers
      - libboost-devel

tests:
  - python:
      imports:
        - gnuradio.${{ oot_name }}
      pip_check: false
  - package_contents:
      include:
        - gnuradio/${{ oot_name }}/api.h
      lib:
        - ${{ name }}
      files:
        # Example flowgraphs
        - ${{ "Library/" if win }}share/gnuradio/examples/${{ oot_name }}/receive.grc

        # GRC blocks
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/${{ oot_name }}_NB.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/${{ oot_name }}_WB.block.yml
  #- script:
      ## Verify that example flowgraphs can be generated
      #- if: unix
        #then: |
          #grcc $PREFIX/share/gnuradio/examples/${{ oot_name }}/receive.grc
      #- if: win
        #then: |
          #grcc %PREFIX%\\Library\\share\\gnuradio\\examples\\${{ oot_name }}\\receive.grc
    #requirements:
      #run:
        #- gnuradio-grc
        #- gnuradio-qtgui

about:
  homepage: https://github.com/daniestevez/gr-hermeslite2
  license: GPL-3.0-or-later
  license_file: LICENSE
  summary: GNU Radio interface module for Hermes Lite 2
  description: >
    GNU Radio modules for Hermes Lite 2.

    hermesNB sources decimated downconverted 48K-to-384K receiver complex
    stream(s), and sinks one 48k sample rate transmit complex stream.
    hermesWB sources raw ADC samples as a vector of floats, with vlen=16384.
    Each individual vector contains time contiguous samples. However there are
    large time gaps between between vectors. This is how HPSDR produces raw
    samples, it is due to Ethernet interface rate limitations between HPSDR and
    the host computer.

    Example gnuradio-companion flowgraphs are installed with the package and
    can be found in:
        - (Linux/macOS) `$CONDA_PREFIX/share/gnuradio/examples/${{ oot_name }}`
        - (Windows) `%CONDA_PREFIX%\share\gnuradio\examples\${{ oot_name }}`

extra:
  recipe-maintainers:
    - ryanvolz
