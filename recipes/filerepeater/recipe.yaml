# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
context:
  oot_name: filerepeater
  name: gnuradio-filerepeater
  # update script relies on `git_url` and `git_branch` and can replace:
  #   `git_rev`, `base_version`, `date_str`, `build`
  git_url: https://github.com/radioconda/gr-filerepeater.git
  git_branch: updates
  git_rev: ec6b3868399e8b9d82cfc56ac57fd4f7eb79fd29
  base_version: "0.0.0"
  date_str: "20250304"
  version: ${{ base_version }}.${{ date_str }}.dev+g${{ git_rev[:7] }}
  build: "3"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  git: ${{ git_url }}
  rev: ${{ git_rev }}

build:
  number: ${{ build }}
  files:
    exclude:
      - "**/gdk-pixbuf*"
      - "**/*.pyc"

requirements:
  build:
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - numpy
        - pybind11
    - ${{ compiler("c") }}
    - ${{ stdlib("c") }}
    - ${{ compiler("cxx") }}
    - cmake
    - git
    - ninja
    - pkg-config
  host:
    - gnuradio-core
    - libboost-devel
    - numpy
    - if: win
      then: pip
    - pybind11
    - python
    - spdlog
  run:
    - numpy
    - python
  ignore_run_exports:
    from_package:
      # this only builds against the headers
      - libboost-devel

tests:
  - python:
      imports:
        - filerepeater
      pip_check: false
  - package_contents:
      include:
        - filerepeater/api.h
      lib:
        - gnuradio-filerepeater
      files:
        # Example flowgraphs
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/sample_flow_sync.grc
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/sample_replay_from_file_with_repeat.grc
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/test_advsink.grc
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/test_stateAnd.grc
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/test_stateOr.grc
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/test_statetimer.grc
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/test_statetobool.grc
        - ${{ "Library/" if win }}share/gnuradio/examples/filerepeater/test_timeofday.grc
        # GRC blocks
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/filerepeater_AdvFileSink.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/filerepeater_TimeOfDay.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/filerepeater_file_repeater_ex.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/filerepeater_msg_to_file.block.yml
  #- script:
      #- if: unix
        #then: |
          ## Put commands that test the package on Linux or macOS below
          ## Verify that example flowgraphs can be generated
          #grcc $PREFIX/share/gnuradio/examples/filerepeater/sample_replay_from_file_with_repeat.grc
          #grcc $PREFIX/share/gnuradio/examples/filerepeater/test_advsink.grc
          #grcc $PREFIX/share/gnuradio/examples/filerepeater/test_stateOr.grc
          #grcc $PREFIX/share/gnuradio/examples/filerepeater/test_timeofday.grc
      #- if: win
        #then: |
          #:: Put commands that test the package on Windows below
          #:: Verify that example flowgraphs can be generated
          #grcc %PREFIX%\\Library\\share\\gnuradio\\examples\\filerepeater\\sample_replay_from_file_with_repeat.grc
          #grcc %PREFIX%\\Library\\share\\gnuradio\\examples\\filerepeater\\test_advsink.grc
          #grcc %PREFIX%\\Library\\share\\gnuradio\\examples\\filerepeater\\test_stateOr.grc
          #grcc %PREFIX%\\Library\\share\\gnuradio\\examples\\filerepeater\\test_timeofday.grc
    #requirements:
      #run:
        #- gnuradio-grc
        #- gnuradio-osmosdr
        #- gnuradio-qtgui

about:
  homepage: https://github.com/ghostop14/gr-filerepeater
  license: GPL-3.0-or-later
  license_file: LICENSE
  summary: GNU Radio block to play back files with delays between replays and/or limited replay counts
  description: >
    A set of GNU Radio blocks with more control over how files are played.

    Shows in widgets now as [Advanced File] Group Advanced File Source: Files
    can be started with an initial delay before starting to output data (output
    0's until the timer is hit), played with delays in between (output 0's in
    between), or played once then output zero's rather than just returning no
    samples. The block can also directly play signed8/HackRF and
    unsigned8/RTL-SDR saved IQ data and dynamically convert it to native
    complex.

    The delay capabilities can all be useful if you're trying to combine
    multiple sample files into a single larger signal with different intervals
    or trying to do blind signal analysis and decoding where the standard file
    source repeat option causes signal discontinuities when it restarts.

    Flow Input Synchronizer: If you play two file sources (even if you create
    two file source blocks but assign the same file to each), the data point
    flows will not be point-synchronized. The Flow Input Synchronizer is a sync
    block that just puts all inputs and outputs in step. In other words if you
    plotted the same file from two different file sources on a frequency sink
    using this block, the plots would now overlap/align whereas they do not
    without it.

    Example gnuradio-companion flowgraphs are installed with the package and
    can be found in:
        - (Linux/macOS) `$CONDA_PREFIX/share/gnuradio/examples/filerepeater`
        - (Windows) `%CONDA_PREFIX%\share\gnuradio\examples\filerepeater`

extra:
  recipe-maintainers:
    - ryanvolz
