# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
context:
  oot_name: radar
  name: gnuradio-radar
  # update script relies on `git_url` and `git_branch` and can replace:
  #   `git_rev`, `base_version`, `date_str`, `build`
  git_url: https://github.com/radioconda/gr-radar.git
  git_branch: updates
  git_rev: 92adce2fa65c4a24888ecca8e6f9db2a71c5c014
  base_version: "0.0.0"
  date_str: "20250220"
  version: ${{ base_version }}.${{ date_str }}.dev+g${{ git_rev[:7] }}
  build: "2"

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  git: ${{ git_url }}
  rev: ${{ git_rev }}

build:
  number: ${{ build }}
  files:
    exclude:
      - "**/gdk-pixbuf*"
      - "**/*.pyc"

requirements:
  build:
    - if: build_platform != target_platform
      then:
        - python
        - cross-python_${{ target_platform }}
        - numpy
        - pybind11
        - qt-main
    - ${{ compiler("c") }}
    - ${{ stdlib("c") }}
    - ${{ compiler("cxx") }}
    - cmake
    - git
    - ninja
    - pkg-config
  host:
    - gnuradio-core
    - fftw
    - libboost-devel
    - if: linux
      then: libgl-devel
    - numpy
    - if: win
      then: pip
    - pybind11
    - pyqt
    - python
    - qt-main
    - qwt
    - volk
    - uhd
    # for tests run during build step
    - matplotlib
  run:
    - numpy
    - python
    - pyqt
  ignore_run_exports:
    from_package:
      - if: linux
        then: libgl-devel

tests:
  - python:
      imports:
        - gnuradio.radar
      pip_check: false
  - package_contents:
      include:
        - gnuradio/radar/api.h
      lib:
        - gnuradio-radar
      files:
        # Example flowgraphs
        - ${{ "Library/" if win }}share/gnuradio/examples/radar/simulator_cw.grc
        # GRC blocks
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_crop_matrix_vcvc.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_estimator_cw.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_find_max_peak_c.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_msg_gate.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_ofdm_cyclic_prefix_remover_cvc.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_os_cfar_2d_vc.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_print_results.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_qtgui_scatter_plot.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_signal_generator_cw_c.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_split_cc.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_static_target_simulator_cc.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_tracking_singletarget.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_transpose_matrix_vcvc.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_trigger_command.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_ts_fft_cc.block.yml
        - ${{ "Library/" if win }}share/gnuradio/grc/blocks/radar_usrp_echotimer_cc.block.yml
  #- script:
      #- if: unix
        #then: |
          ## Put commands that test the package on Linux or macOS below
          ## Verify that example flowgraphs can be generated
          #grcc $PREFIX/share/gnuradio/examples/radar/simulator_cw.grc
      #- if: win
        #then: |
          #:: Put commands that test the package on Windows below
          #:: Verify that example flowgraphs can be generated
          #grcc %PREFIX%\\Library\\share\\gnuradio\\examples\\radar\\simulator_cw.grc
    #requirements:
      #run:
        #- gnuradio-grc

about:
  homepage: https://github.com/kit-cel/gr-radar
  license: GPL-3.0-or-later
  license_file: LICENSE
  summary: GNU Radio Radar Toolbox
  description: >
    The gr-radar project provides a toolbox of commonly used radar algorithms.
    An important part is the UHD Echotimer, which enables a synchronized TX and
    RX stream from USRPs to ensure a constant phase relation in measurements.
    Example flowgraphs for CW, Dual CW, FSK, FMCW and OFDM radar are given and
    partly tested on hardware. GUI elements for target representation and
    further signal processing algorithms such as target tracking are
    implemented. Check out the project website for example videos and further
    information.

    Example gnuradio-companion flowgraphs are installed with the package and
    can be found in:
        - (Linux/macOS) `$CONDA_PREFIX/share/gnuradio/examples/radar`
        - (Windows) `%CONDA_PREFIX%\share\gnuradio\examples\radar`

extra:
  recipe-maintainers:
    - ryanvolz
